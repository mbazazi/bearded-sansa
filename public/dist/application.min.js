"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mymeanapp",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils","ui.bootstrap.datetimepicker","stripe","angularUtils.directives.dirPagination","frapontillo.bootstrap-switch","uiGmapgoogle-maps","ngFileUpload","ngToast","angucomplete-alt","ngNotificationsBar","cgBusy","chart.js","ImageCropper"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$urlRouterProvider","$httpProvider","uiGmapGoogleMapApiProvider","ngToastProvider","notificationsConfigProvider","ChartJsProvider",function($locationProvider,$urlRouterProvider,$httpProvider,uiGmapGoogleMapApiProvider,ngToastProvider,notificationsConfigProvider,ChartJsProvider){notificationsConfigProvider.setAutoHide(!0),notificationsConfigProvider.setHideDelay(3e3),notificationsConfigProvider.setAcceptHTML(!1),ChartJsProvider.setOptions({colours:["#ffbb66","#DCDCDC","#F7464A","#46BFBD","#FDB45C","#949FB1","#4D5360"],responsive:!0}),ngToastProvider.configure({animation:"fade"}),Stripe.setPublishableKey("pk_test_7LnUmjmnIwkkWJUvgKlqLtSd"),uiGmapGoogleMapApiProvider.configure({key:"AIzaSyACVwB4i_6ujTrdjTMI-_tnsDrf6yOfssw",v:"3.17",libraries:"weather,geometry,visualization"}),$locationProvider.html5Mode(!0).hashPrefix("!"),$httpProvider.defaults.headers.common={Accept:"application/json","Content-Type":"application/json"}}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("admins"),ApplicationConfiguration.registerModule("appointments"),ApplicationConfiguration.registerModule("articles"),ApplicationConfiguration.registerModule("charts"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("messages"),ApplicationConfiguration.registerModule("rdash"),ApplicationConfiguration.registerModule("staff-onboard"),ApplicationConfiguration.registerModule("users"),angular.module("admins").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Dashboard","/dashboard/admin")}]),angular.module("admins").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{url:"/admin",templateUrl:"modules/admins/views/dashboard/main.html",controller:"AdminsController"}).state("admin.dashboard",{url:"/dashboard",templateUrl:"modules/admins/views/list-admins.client.view.html"}).state("admin.appointments_view",{url:"/appointments/:appointmentId",templateUrl:"modules/appointments/views/view-appointment.client.view.html",controller:"AppointmentsController"}).state("adduser",{url:"/admin/create",templateUrl:"modules/admins/views/create-admin.client.view.html",controller:"AdminsController"}).state("admin.edituser",{url:"/:id/edit",templateUrl:"modules/admins/views/edit-admin.client.view.html",controller:"AdminsController"}).state("editAdmin",{url:"/admins/:adminId/edit",templateUrl:"modules/admins/views/edit-admin.client.view.html"})}]),angular.module("admins").factory("Staff",["$resource",function($resource){return $resource("staff/:id",{id:"@_id"},{update:{method:"PUT"}})}]),angular.module("appointments").run(["Menus",function(Menus){}]),angular.module("appointments").config(["$stateProvider",function($stateProvider){$stateProvider.state("appointments",{url:"/appointments",templateUrl:"modules/appointments/views/appointments-view.html",controller:"AppointmentsController"}).state("create_appointment",{url:"/appointments/create",templateUrl:"modules/appointments/views/create-appointment.client.view.html",controller:"AppointmentsController"}).state("appointments_view",{url:"/appointments/:appointmentId",templateUrl:"modules/appointments/views/view-appointment.client.view.html",controller:"AppointmentsController"}).state("appointment_edit",{url:"/appointments/:appointmentId/edit",templateUrl:"modules/appointments/views/edit-appointment.client.view.html",controller:"AppointmentsController"})}]),angular.module("appointments").controller("AppointmentsController",["$scope","$stateParams","$location","Authentication","Appointments","myAppointment","Users","Staff","$state","$http","ngToast","$modal","$rootScope","$resource","appointments",function($scope,$stateParams,$location,Authentication,Appointments,myAppointment,Users,Staff,$state,$http,ngToast,$modal,$rootScope,$resource,appointments){$scope.authentication=Authentication,$scope.app_query=Authentication.appointment_query,$scope.myAppointment=myAppointment,Users.query().$promise.then(function(res){$scope.clientList=res}),$scope.total_apps=appointments.length,$scope.staffList={},$scope.formData={},$scope.showControls=!1,$scope.appointments_completed=void 0,Staff.query({roles:"staff"}).$promise.then(function(res){$scope.staffList=res}),$scope.appointments=appointments,$scope.myAppointment?$scope.formData=$scope.myAppointment:$scope.formData={},$scope.AppointmentsGetter=function(app_query,cancelled){cancelled===!0?app_query.cancelled=!0:app_query.cancelled=!1,$scope.find(app_query)},$scope.find=function(query){console.log(query),Appointments.query(query).$promise.then(function(res){return console.log(res),console.log(res.length),res.length>0?($scope.appointments=res,$scope.total_apps=res.length,$scope.total_apps):($scope.msg="You have no appointments",void($scope.total_apps=res.length))})},$scope.dateRange=function(date1,date2){if(void 0===date1||void 0===date2)return void console.log("Undefined");var query={},Appointment_range=$resource("/admin/appointments");query="staff"===Authentication.userRole?{staff_id:Authentication.user._id,from:date1,to:date2}:"admin"===Authentication.userRole?{from:date1,to:date2}:{user:Authentication.user._id,from:date1,to:date2},Appointment_range.query(query).$promise.then(function(result){$scope.appointments=result})},$scope.jobsDone=function(){alert("Jobs Done Fired"+$scope.appointments_completed),Appointments.query({jobDone:!0}).$promise.then(function(res){return $scope.appointments_completed=res.length,$scope.appointments_completed})},$scope.create=function(){$scope.formData.updated=new Date,$scope.formData.staff_id_query=$scope.formData.staff_id;var appointment=new Appointments($scope.formData);appointment.$save(function(response){$location.path("appointments/"+response._id),$scope.formData={}},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.modal=function(app){var modalInstance=$modal.open({templateUrl:"modules/appointments/views/cancel_modal.html",controller:"ModalInstanceController",size:"sm",scope:$scope,resolve:{app:function(){return app}}});modalInstance.result.then(function(selectedItem){console.log(selectedItem),$scope.selected=selectedItem},function(){$scope.modalInstance=null})},$scope.openJobDoneModal=function(app){console.log(app.jobDone);var today=new Date,appointment_date=new Date(app.appointment_date),difference_date=appointment_date-today;console.log(difference_date),difference_date>0?app.difference_date=difference_date:app.difference_date=null;var modalInstance=$modal.open({templateUrl:"modules/appointments/views/jobDone_modal.html",controller:"ModalInstanceController",size:"lg",scope:$scope,resolve:{app:function(){return app}}});modalInstance.result.then(function(selectedItem){console.log(selectedItem),$scope.selected=selectedItem},function(){$scope.modalInstance=null})},$scope.remove=function(appointment){if(appointment){appointment.$remove();for(var i in $scope.appointments)$scope.appointments[i]===appointment&&$scope.appointments.splice(i,1)}else $scope.appointment.$remove(function(){$location.path("appointments")})},$scope.refund=function(appointment_id){$scope.payment.createRefund(appointment_id,null,function(result){console.log(result),result.refundObj[0]?$scope.find($scope.app_query):ngToast.create({className:"danger",dismissButton:!0,content:result.data.error.message})})},$scope.update=function(){var appointment=$scope.appointment;Appointments.update(appointment).$promise.then(function(){$location.path("/admin")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.findOne=function(){Appointments.get({appointmentId:$stateParams.appointmentId}).$promise.then(function(data){console.log(data),$scope.appointment=data;var address=data.client[0].address.main_address;$scope.map={center:{latitude:address.lat,longitude:address.lng},zoom:15},$scope.marker={id:0,coords:{latitude:address.lat,longitude:address.lng},options:{draggable:!0}}},function(err){$scope.error=err})},$scope.formData.appointment_date=new Date,$scope.formData.appointment_date.setHours(18,30),$scope.d=new Date;var day=$scope.formData.appointment_date.getDate()+7;$scope.formData.appointment_date.setDate(day),$scope.dateTimeNow=function(){$scope.date=new Date},$scope.dateTimeNow(),$scope.toggleMinDate=function(){$scope.minDate=$scope.minDate?null:new Date},$scope.maxDate=new Date("2014-06-22"),$scope.toggleMinDate(),$scope.dateOptions={startingDay:1,showWeeks:!1},$scope.disabled=function(calendarDate,mode){return"day"===mode&&(0===calendarDate.getDay()||6===calendarDate.getDay())},$scope.hourStep=1,$scope.minuteStep=15,$scope.timeOptions={hourStep:[1,2,3],minuteStep:[1,5,10,15,25,30]},$scope.showMeridian=!0,$scope.timeToggleMode=function(){$scope.showMeridian=!$scope.showMeridian},$scope.resetHours=function(){$scope.date.setHours(1)}}]),angular.module("appointments").controller("ModalInstanceController",["$scope","$modalInstance","app","Appointments",function($scope,$modalInstance,app,Appointments){$scope.app=app,console.log(app),$scope.cancel=function(){$scope.app.jobDone=!1,app.difference_date=null,$modalInstance.dismiss("cancel")},$scope.cancelAppointment=function(){app.cancelled=!0,app.cancelled_date=new Date,app.staff_id[0]?$scope.authentication.user.id===app.staff_id[0]._id&&(app.cancelled_by_staff=!0):app.cancelled_by_staff=!1,app.cancelled_by_staff=!1;var date=new Date,time=date.getTime(),apptime=new Date(app.appointment_date).getTime(),difference_date=apptime-time;if(864e5>difference_date){var confirmed=confirm("cancelling this appointment you will still be charged");if(!confirmed)return;console.log("confirmed")}var appointment=new Appointments(app);appointment.$cancel(function(res){console.log(res),$modalInstance.dismiss(),$scope.find($scope.app_query),ngToast.create({content:"Cancellation Successful",className:"success"})},function(error){console.log(error),ngToast.create({content:error,className:"danger"})})},app.difference_date>0&&alert("You cannot claim this appointment until the job has been done."),$scope.selectChange=function(){app.jobDone===!0&&$scope.payment.createCharge(app.client[0],app._id,function(app){console.log(app),app.$update().then(function(result){"250 Great success"===result.response&&($scope.jobsDone(),console.log($scope.appointments_completed),$modalInstance.dismiss(),$scope.find($scope.app_query),ngToast.create({className:"success",dismissButton:!0,content:"Invoice Emailed to Client"}))})})}}]),angular.module("appointments").controller("JobDoneController",["$scope","$modalInstance","app",function($scope,app){$scope.app=app,$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]),angular.module("appointments").factory("Appointments",["$resource",function($resource){return $resource("appointments/:appointmentId",{appointmentId:"@_id"},{update:{method:"PUT"},cancel:{method:"POST"}})}]),angular.module("articles").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Articles","articles","dropdown","/articles(/create)?"),Menus.addSubMenuItem("topbar","articles","List Articles","articles"),Menus.addSubMenuItem("topbar","articles","New Article","articles/create")}]),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("listArticles",{url:"/articles",templateUrl:"modules/articles/views/list-articles.client.view.html",controller:["$scope","art",function($scope,art){$scope.articles=art}],resolve:{art:["Articles",function(Articles){return Articles.query()}]}}).state("listArticles.createArticle",{url:"/create",templateUrl:"modules/articles/views/create-article.client.view.html",controller:"ArticlesController"}).state("listArticles.viewArticle",{url:"/:articleId",templateUrl:"modules/articles/views/view-article.client.view.html"}).state("editArticle",{url:"/articles/:articleId/edit",templateUrl:"modules/articles/views/edit-article.client.view.html"})}]),angular.module("articles").controller("ArticlesController",["$scope","$stateParams","$location","Authentication","Articles","myAppointment",function($scope,$stateParams,$location,Authentication,Articles,myAppointment,art){$scope.authentication=Authentication,$scope.find=function(){Articles.query({},function(response){$scope.articles=response},function(){})},$scope.create=function(){console.log("From the Create(): "+$scope.articles);var article=new Articles({title:this.title,content:this.content});article.$save().then(function(response){console.log("From the Callback: "+$scope.articles),$location.path("articles"),$scope.title="",$scope.content="",$scope.find()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.myAppointment=myAppointment,$scope.remove=function(article){if(article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},$scope.update=function(){var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId})}}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("charts").config(["$stateProvider",function($stateProvider){$stateProvider.state("rdash.charts",{url:"/charts",views:{"":{templateUrl:"modules/charts/views/chart-view.html",controller:"ChartCtrl",resolve:{charts:["Appointments","Authentication",function(Appointments,Authentication){return Appointments.query({jobDone:!0,staff_id:Authentication.user._id}).$promise}],Appointments:"Appointments"}}}})}]),angular.module("charts").controller("ChartCtrl",["$scope","charts","Appointments","$resource","Authentication",function($scope,charts,Appointments,$resource,Authentication){$scope.options={multiTooltipTemplate:function(label){return label.datasetLabel+": $"+label.value}},console.log(charts),$scope.showAlert=!1,charts.length<=0&&($scope.showAlert=!0),$scope.data=[],$scope.labels=[],$scope.total_earnings=0,$scope.series=["Earned","Refund"],$scope.data=[],$scope.data[0]=[],$scope.data[1]=[],$scope.data[2]=[],console.log($scope.data[0][0]),console.log($scope.data[1]),$scope.onClick=function(points,evt){console.log(points,evt)},$scope.dateRange=function(date1,date2){if(void 0===date1||void 0===date2)return void console.log("Undefined");var Appointment_range=$resource("/admin/appointments");Appointment_range.query({staff_id:Authentication.user._id,from:date1,to:date2}).$promise.then(function(result){console.log(result.length),$scope.showChart(result)})},$scope.showChart=function(charts){return $scope.data=[],$scope.data[0]=[],$scope.data[1]=[],$scope.data[2]=[],$scope.labels=[],$scope.total_earnings=0,charts.length<=0?void($scope.hideChart=!0):($scope.hideChart=!1,void angular.forEach(charts,function(chart,key){var d=new Date(chart.appointment_date).toDateString();$scope.labels.push(d),$scope.total_earnings+=chart.cost.dollars,$scope.total_earnings.toFixed(2),$scope.data[0].push(chart.cost.dollars),$scope.data[1].push(chart.refundObj[0]?chart.refundObj[0].amount/100:0)}))},$scope.showChart(charts)}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",views:{"":{templateUrl:"modules/core/views/home.client.view.html"},"checkout@home":{templateUrl:"modules/core/views/sidebar.client.html"}},controller:"HomeController"}).state("home.date",{url:"date",views:{"":{templateUrl:"modules/core/views/form-date.html"},"checkout@home":{templateUrl:"modules/core/views/checkout.html"}},controller:"HomeController"}).state("home.address",{url:"address",views:{"":{templateUrl:"modules/core/views/form-address.html"},"checkout@home":{templateUrl:"modules/core/views/checkout.html"}},controller:"HomeController"}).state("success",{url:"/success",views:{"":{templateUrl:"modules/core/views/success.html",controller:"HomeController"},"panel@success":{templateUrl:"modules/core/views/checkout.html",controller:"HomeController"}}})}]).run(["$rootScope","$state","$stateParams","Authentication",function($rootScope,$state,$stateParams,Authentication){$rootScope.authentication=Authentication,$rootScope.$on("password_reset",function(res){$rootScope.authentication=Authentication})}]),angular.module("core").controller("HeaderController",["$scope","$rootScope","Authentication","Menus","$http","$state","myAppointment","$location",function($scope,$rootScope,Authentication,Menus,$http,$state,myAppointment,$location){$scope.authentication=Authentication,$scope.authentication.user=Authentication._data.user,$scope.myApp=myAppointment,void 0!==$rootScope.authentication._data.user.stripeCustomer&&($scope.card=$rootScope.authentication._data.user.stripeCustomer.sources.data[0]),$rootScope.$on("password_reset",function(res){$scope.authentication=Authentication}),$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed,console.log($scope.authentication.user)},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","$rootScope","Authentication","$http","$location","$state","myAppointment","Payment","Users","Appointments","geocoder","notifications","$locale",function($scope,$rootScope,Authentication,$http,$location,$state,myAppointment,Payment,Users,Appointments,geocoder,notifications,$locale){var hourly=125;$scope.authentication=Authentication,$scope.payment=Payment,$scope.user_hadNoAccont=!0,$scope.myAppointment=myAppointment,$rootScope.user_exists=null,$scope.$on("error",function(event,data){$scope.error=data.message}),console.log($state.current.name),$scope.$watch("myform",function(oldval,newval){$scope.myAppointment.addData($scope.formData)}),$scope.emailChanged=function(val){var json={email:val.email};$scope.myform.email.$valid&&(console.log(val),$scope.authentication.check_username(json,function(res){res.isUser===!0?$scope.user_hadNoAccont=!1:res.isUser===!1&&($scope.user_hadNoAccont=!0)}))},$scope.$on("MyAppointmentChange",function(){$scope.testing=myAppointment.data}),$scope.checkGeocoder=function(){geocoder.geocode($scope.authentication.user).success(function(res){console.log(res)})},$scope.getClosestStaff=function(){$scope.formData=$scope.authentication.user;var myvar=geocoder.getClosestStaff($scope.formData);console.log(myvar)},$scope.sendEmail=function(appointmentId){$http.get("/email/"+appointmentId).success(function(res){console.log(res)}).error(function(res){console.log(res)})},$scope.getResults=function(){geocoder.getResults($scope.formData).success(function(res){console.log(res)})},$scope.submitAction=function(){if($scope.authentication.user._id){$scope.formData.updated=new Date,$scope.formData.client=$scope.authentication.user._id,$scope.formData.appointment_address=$scope.authentication.user.address.main_address,console.log($scope.formData);var appointment=new Appointments($scope.formData);appointment.$save(function(res){notifications.showSuccess({message:"Success! You should recieve an email shortly"});res._id;$state.go("rdash.dash")})}$scope.user_hadNoAccont?$scope.user_hadNoAccont&&$scope.authentication.signUp($scope.formData,function(res){console.log(res),console.log(res.token),geocoder.geocode(res).success(function(geores,status){var results=geores.results[0].geometry.location;console.log(results),console.log(res),$scope.formData.address.main_address.lat=results.lat,$scope.formData.address.main_address.lng=results.lng,$scope.myAppointment.addData($scope.formData)}).error(function(err){alert(err)}),$state.go(void 0===res.token?"payment":"rdash")}):$scope.authentication.signin($scope.formData,function(data){console.log(data)})},$scope.book=!1,$scope.items=[{desc:"60 Mins",hours:1},{desc:"90 Mins",hours:1.5},{desc:"120 Mins",hours:2}],$rootScope.formData={},$scope.formData.total_cost={dollar_total_price:1.13*hourly,dollar_price:hourly,dollar_tax:.13*hourly,cent_price:1.13*hourly*100},console.log($scope.formData.total_cost),$scope.formData.total_time=1,$scope.setTotalPrice=function(formData){var total_time=formData.total_time,total_cost={dollar_total_price:(total_time*hourly*1.13).toFixed(2),dollar_price:(total_time*hourly).toFixed(2),dollar_tax:(total_time*hourly*.13).toFixed(2),cent_price:total_time*hourly*1.13*100};$scope.formData.total_cost=total_cost},$rootScope.formData.appointment_date=new Date,$rootScope.formData.appointment_date.setHours(18,30),$scope.d=new Date;var day=$rootScope.formData.appointment_date.getDate()+7;$rootScope.formData.appointment_date.setDate(day),$scope.showB=!1,$scope.$watch(function(){return $rootScope.formData.appointment_date},function(oldval,newval){newval!==oldval&&($scope.showB=!0,$scope.showC=!1,$scope.book=!0)}),$scope.dateTimeNow=function(){$scope.date=new Date},$scope.dateTimeNow(),$scope.toggleMinDate=function(){$scope.minDate=$scope.minDate?null:new Date},$scope.maxDate=new Date("2014-06-22"),$scope.toggleMinDate(),$scope.dateOptions={startingDay:1,showWeeks:!1},$scope.disabled=function(calendarDate,mode){return"day"===mode&&(0===calendarDate.getDay()||6===calendarDate.getDay())},$scope.hourStep=1,$scope.minuteStep=15,$scope.timeOptions={hourStep:[1,2,3],minuteStep:[1,5,10,15,25,30]},$scope.showMeridian=!0,$scope.timeToggleMode=function(){$scope.showMeridian=!$scope.showMeridian},$scope.resetHours=function(){$scope.date.setHours(1)}}]),angular.module("core").directive("image",["$q",function($q){window.URL||window.webkitURL;return{restrict:"A",scope:{image:"=",resizeMaxHeight:"@?",resizeMaxWidth:"@?",resizeQuality:"@?",resizeType:"@?"},link:function(scope,element,attrs,ctrl){element.bind("change",function(evt){attrs.multiple&&(scope.image=[]);evt.target.files})}}}]),angular.module("core").directive("scrollOnClick",function(){return{restrict:"A",link:function(scope,$elm,attrs){var idToScroll=attrs.href;$elm.on("click",function(){var $target;$target=idToScroll?$(idToScroll):$elm,$("body").animate({scrollTop:$target.offset().top},"slow")})}}}),angular.module("core").directive("tabs",function(){return{restrict:"E",transclude:!0,scope:{},controller:["$scope","$element",function($scope,$element){var panes=$scope.panes=[];$scope.select=function(pane){angular.forEach(panes,function(pane){pane.selected=!1}),pane.selected=!0},this.addPane=function(pane){0===panes.length&&$scope.select(pane),panes.push(pane)}}],template:'<div class="tabbable"><ul class="nav nav-tabs"><li ng-repeat="pane in panes" ng-class="{active:pane.selected}"><a href="" ng-click="select(pane)">{{pane.title}}</a></li></ul><div class="tab-content" ng-transclude></div></div>',replace:!0}}).directive("pane",function(){return{require:"^tabs",restrict:"E",transclude:!0,scope:{title:"@"},link:function(scope,element,attrs,tabsCtrl){tabsCtrl.addPane(scope)},template:'<div class="tab-pane" ng-class="{active: selected}" ng-transclude></div>',replace:!0}}),angular.module("core").factory("geocoder",["$http","$state","Staff","uiGmapGoogleMapApi",function($http,$state,Staff,uiGmapGoogleMapApi){var geocoder={};geocoder.results={};var key="AIzaSyACVwB4i_6ujTrdjTMI-_tnsDrf6yOfssw";return geocoder.geocode=function(formData){console.log(formData.address.main_address.street_1);var address=formData.address.main_address.street_1+", "+formData.address.main_address.street_2+" ,"+formData.address.main_address.city+", "+formData.address.main_address.postcode,res=$http.get("https://maps.googleapis.com/maps/api/geocode/json?address="+address+"&key="+key);return geocoder.results=res,res},geocoder.getResults=function(){return void 0===geocoder.results?"No results":geocoder.results},geocoder.calcDistance=function(p1,p2){return(google.maps.geometry.spherical.computeDistanceBetween(p1,p2)/1e3).toFixed(2)},geocoder.geolocate=function(position){var mygeocoder=null;uiGmapGoogleMapApi.then(function(map){var latlng=new google.maps.LatLng(40.714224,-73.961452),geocoder=map.Geocoder({location:latlng});console.log(geocoder)}),mygeocoder=new google.maps.Geocoder,console.log(mygeocoder);var latlng=new google.maps.LatLng(position.coords.latitude,position.coords.longitude);mygeocoder.geocode({location:latlng},function(results,status){if(status==google.maps.GeocoderStatus.OK)if(results[1]){var country=results.slice(-1).pop();console.log(country.address_components[0].short_name),geocoder.results.country_code=country.address_components[0].short_name}else window.alert("No results found");else window.alert("Geocoder failed due to: "+status)})},geocoder.getClosestStaff=function(formData){Staff.query({roles:"staff"}).$promise.then(function(res){var myDistances=[];angular.forEach(res,function(result){var p1=new google.maps.LatLng(result.address.main_address.lat,result.address.main_address.lng),p2=new google.maps.LatLng(46.0438317,9.75936230000002),distance=geocoder.calcDistance(p1,p2);myDistances.push({distance:distance,staff_id:result._id})});for(var index=0,value=myDistances[0].distance,i=1;i<myDistances.length;i++)myDistances[i].distance<value&&(value=myDistances[i].distance,index=i);console.log(index)})},geocoder}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("core").factory("myAppointment",["$rootScope",function($rootScope){var myAppointment={};return myAppointment.addData=function(data){myAppointment.data=data,this.broadcastChange()},myAppointment.removeData=function(){myAppointment.data="",this.broadcastChange()},myAppointment.getData=function(){return this.data},myAppointment.broadcastChange=function(){$rootScope.$broadcast("MyAppointmentChange")},myAppointment}]),angular.module("messages").config(["$stateProvider",function($stateProvider){$stateProvider.state("listMessages",{url:"/messages",templateUrl:"modules/messages/views/list-messages.client.view.html",controller:"MessagesController",resolve:{messages:["$q","Authentication","Messages",function($q,Authentication,Messages){return Messages.query({user_to:Authentication.user._id}).$promise}]}}).state("createMessage",{url:"/messages/create/:usertoId",templateUrl:"modules/messages/views/create-message.client.view.html",controller:"MessagesController"}).state("viewMessage",{url:"/messages/:messageId",templateUrl:"modules/messages/views/view-message.client.view.html",controller:"MessagesController",resolve:{messages:["$q","Authentication","Messages",function($q,Authentication,Messages){return Messages.query({user_to:Authentication.user._id}).$promise}]}}).state("editMessage",{url:"/messages/:messageId/edit",templateUrl:"modules/messages/views/edit-message.client.view.html",controller:"MessagesController"})}]),angular.module("messages").controller("MessagesController",["$scope","$stateParams","$location","Authentication","Messages","MessageHelper","ngToast","Users","messages",function($scope,$stateParams,$location,Authentication,Messages,MessageHelper,ngToast,Users,messages){$scope.authentication=Authentication,$scope.user=Authentication._data.user,$scope.test=MessageHelper,$scope.testObj={},$scope.testObj.originalObject={};new Date;console.log(messages),$scope.messages=messages,$scope.items=MessageHelper.items,$scope.new_messages=0;new Date;if(angular.forEach(messages,function(message,key){message.message_read===!1&&$scope.new_messages++}),$stateParams.usertoId){var user_to=new Users.get({id:$stateParams.usertoId}).$promise.then(function(res){return user_to=res,$scope.testObj.displayName="To: "+user_to.displayName,$scope.testObj.originalObject._id=user_to._id,user_to});$scope.testObj.displayName=user_to.displayName}$scope.create=function(){var message=new Messages({subject:this.subject,message_body:this.message_body,user_to:$scope.testObj.originalObject._id});message.$save(function(response){$location.path("dashboard/admin"),ngToast.create({content:"Message Sent to "+$scope.testObj.displayName,className:"success"}),$scope.subject=""},function(errorResponse){ngToast.create({content:errorResponse.data.message,className:"danger"}),$scope.error=errorResponse.data.message})},$scope.remove=function(message){if(message){message.$remove();for(var i in $scope.messages)$scope.messages[i]===message&&$scope.messages.splice(i,1);
}else $scope.message.$remove(function(){$location.path("messages")})},$scope.update=function(){var message=$scope.message;console.log(message),message.$update(function(){console.log("The message has been updated")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){Messages.query({user_to:$scope.user._id}).$promise.then(function(result){$scope.messages=result})},$scope.findOne=function(){Messages.get({messageId:$stateParams.messageId}).$promise.then(function(result){$scope.message=result,console.log($scope.message),$scope.message.message_read=!0,$scope.update()})}}]),angular.module("messages").factory("MessageHelper",[function(){var _this=this;return _this.to={},_this.setReceive=function(to){_this.to=to,alert(to._id)},_this.getReceive=function(){return alert(_this.to._id),console.log(_this.to),_this.to},_this.items=5,_this}]),angular.module("messages").factory("Messages",["$resource",function($resource){return $resource("messages/:messageId",{messageId:"@_id"},{update:{method:"PUT"},query:{method:"GET",isArray:!0}})}]),angular.module("rdash").config(["$stateProvider",function($stateProvider){$stateProvider.state("rdash",{url:"/dashboard",templateUrl:"modules/rdash/views/main.html",controller:"AdminsController"}).state("rdash.dash",{url:"/admin",resolve:{messages:["$q","Authentication","Messages",function($q,Authentication,Messages){return console.log(Authentication.user),Messages.query({user_to:Authentication.user._id}).$promise}],appointments:["Authentication","Appointments",function(Authentication,Appointments){console.log(Authentication.user);var query={cancelled:!1};switch(Authentication.user.roles[0]){case"staff":var query={staff_id:Authentication.user._id,cancelled:!1};break;default:var query={client:Authentication.user._id,cancelled:!1}}return console.log(Authentication.appointment_query),Appointments.query(query).$promise}],Authentication:"Authentication"},views:{"":{templateUrl:"modules/rdash/views/dashboard.html",controller:"AppointmentsController"},"appointments@rdash.dash":{templateUrl:"modules/appointments/views/appointments-view.html",controller:"AppointmentsController"},"new_messages@rdash.dash":{templateUrl:"modules/rdash/views/new_messages.html",controller:"MessagesController"},"messages@rdash.dash":{templateUrl:"modules/messages/views/list-messages.client.view.html",controller:"MessagesController"}}}).state("rdash.dash.view",{url:"",parent:"rdash.dash",templateUrl:"modules/appointments/views/appointments-view.html",controller:"AppointmentsController"}).state("rdash.tables",{url:"/tables",views:{"":{templateUrl:"modules/rdash/views/tables.html",controller:"SettingsController"}}}).state("rdash.tables.users",{url:"/users",templateUrl:"modules/rdash/views/main.html"})}]).run(["$rootScope","$state","$stateParams",function($rootScope,$state,$stateParams){$rootScope.$state=$state,$rootScope.$stateParams=$stateParams,$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){})}]),angular.module("rdash").controller("AdminsController",["$scope","$stateParams","$location","Authentication","Users","$http","$state","Staff","Appointments","geocoder","Payment",function($scope,$stateParams,$location,Authentication,Users,$http,$state,Staff,Appointments,geocoder,Payment){$scope.app_query=Authentication.appointment_query,$scope.authentication=Authentication,$scope.payment=Payment,$scope.users=Users.query(),$scope.msg="",$scope.isClient=Authentication.isClient,$scope.staffList={},$scope.show_table=!1,$scope.total_users=$scope.users.length,$scope.authentication.user||$state.go("signin"),$scope.dt1=new Date,$scope.dt2=null,$scope.filterDateAdded=function(){null!==$scope.dt1&&($scope.dateFilter=function(item){return $scope.parseDate(item.dateAdded)>=$scope.dt1&&$scope.parseDate(item.dateAdded)<=$scope.dt2})},$scope.items=10,$scope.orderProp="",$scope.reverse=!0,$scope.order=function(orderProp){$scope.reverse=$scope.orderProp===orderProp?!$scope.reverse:!1,$scope.orderProp=orderProp},("staff"===$scope.authentication.userRole||"admin"===$scope.authentication.userRole)&&($scope.isClient=!1),$scope.createUser=function(){geocoder.geocode($scope.credentials).success(function(res,status,headers,config){console.log(res);var results=res.results[0].geometry.location;$scope.credentials.address.main_address.lat=results.lat,$scope.credentials.address.main_address.lng=results.lng,$http.post("/auth/createuser",$scope.credentials).success(function(response){$location.path("/dashboard/tables")}).error(function(response){$scope.error=response.message})}).error(function(results,status,headers,config){$scope.error=results.message})},$scope.viewing={};var individuals_appointments={};individuals_appointments="user"===Authentication.userRole?{client:Authentication.user.id}:{staff_id:$stateParams.userId},$scope.findOne=function(){$scope.viewing=Users.get({id:$stateParams.userId}),console.log($scope.viewing),$scope.ind_apps=Appointments.query(individuals_appointments)},$stateParams.userId&&$scope.findOne()}]),angular.module("rdash").controller("AlertsCtrl",["$scope",function($scope){$scope.addAlert=function(){$scope.alerts.push({msg:"Another alert!"})},$scope.closeAlert=function(index){$scope.alerts.splice(index,1)}}]),angular.module("rdash").controller("MasterCtrl",["$scope","$state","$rootScope","Authentication","$cookieStore",function($scope,$stateParams,$rootScope,Authentication,$cookieStore){var mobileView=992;$scope.authentication=Authentication,console.log($scope.authentication),$scope.getWidth=function(){return window.innerWidth},$scope.$watch($scope.getWidth,function(newValue,oldValue){newValue>=mobileView?angular.isDefined($cookieStore.get("toggle"))?$scope.toggle=$cookieStore.get("toggle")?!0:!1:$scope.toggle=!0:$scope.toggle=!1}),$scope.toggleSidebar=function(){$scope.toggle=!$scope.toggle,$cookieStore.put("toggle",$scope.toggle)},window.onresize=function(){$scope.$apply()}}]),angular.module("rdash").controller("UserViewController",["$scope","Users","$stateParams","Appointments",function($scope,Users,$stateParams,Appointments){$scope.viewing={},$scope.appointments={};var app_query={};app_query="user"===$stateParams.userRole?{client:$stateParams.userId}:{staff_id:$stateParams.userId},console.log($stateParams),$scope.findOne=function(){$scope.viewing=Users.get({id:$stateParams.userId}),$scope.appointments=Appointments.query(app_query)},$stateParams.userId&&$scope.findOne()}]),angular.module("rdash").directive("rdLoading",function(){var directive={restrict:"AE",template:'<div class="loading"><div class="double-bounce1"></div><div class="double-bounce2"></div></div>'};return directive}),angular.module("rdash").directive("rdWidgetBody",function(){var directive={requires:"^rdWidget",scope:{loading:"@?",classes:"@?",query:"@?"},transclude:!0,template:'<div class="widget-body" ng-class="classes"><rd-loading ng-show="loading"></rd-loading><div ng-hide="loading" class="widget-content" ng-transclude></div></div>',restrict:"E"};return directive}),angular.module("rdash").directive("rdWidgetFooter",function(){var directive={requires:"^rdWidget",transclude:!0,template:'<div class="widget-footer" ng-transclude></div>',restrict:"E"};return directive}),angular.module("rdash").directive("rdWidgetHeader",function(){var directive={requires:"^rdWidget",scope:{title:"@",icon:"@",query:"@?"},transclude:!0,template:'<div class="widget-header"><div class="row"><div class="pull-left"><i class="fa" ng-class="icon"></i> {{title}} </div><div class="col-xs-12" ng-transclude></div></div></div>',restrict:"E"};return directive}),angular.module("rdash").directive("rdWidget",function(){var directive={transclude:!0,template:'<div class="widget" ng-transclude></div>',restrict:"EA",link:function(scope,element,attrs,tabsCtrl){}};return directive}),angular.module("staff-onboard").config(["$stateProvider",function($stateProvider){$stateProvider.state("onboard",{url:"/rmt","abstract":!0,template:"<ui-view>",controller:"StaffOnboardController"}).state("onboard.onboard_1",{url:"/onboard",views:{"":{templateUrl:"modules/staff-onboard/views/staff-onboard.html",controller:"StaffOnboardController"},"panel1@onboard.onboard_1":{templateUrl:"modules/staff-onboard/views/onboard_1.html",controller:"StaffOnboardController"}}}).state("onboard.onboard_2",{url:"/apply",templateUrl:"modules/staff-onboard/views/onboard_2.html",controller:"StaffOnboardController"}).state("onboard.thanks",{url:"/thanks",views:{"":{templateUrl:"modules/staff-onboard/views/thanks.html",controller:"StaffOnboardController"}}})}]),angular.module("staff-onboard").controller("StaffOnboardController",["$scope","Payment","$http","ngToast","$state",function($scope,Payment,$http,ngToast,$state){$scope.payment=Payment,$scope.account_details={},$scope.account_details.legal_entity={},$scope.account_details.legal_entity.managed=!0,$scope.account_details.legal_entity.country="CA",$scope.account_details.legal_entity.dob="",$scope.account_details.today=new Date,$scope.sendApplication=function(rmt){$http.post("/staff",rmt).success(function(data,status){$state.go("onboard.thanks")}).error(function(err,status){console.log(err),ngToast.create({className:"danger",content:err.msg})})},$scope.today=function(){$scope.account_details.legal_entity.dob=new Date-20},$scope.today(),$scope.clear=function(){$scope.account_details.legal_entity.dob=null},$scope.disabled=function(date,mode){return"day"===mode&&(0===date.getDay()||6===date.getDay())},$scope.toggleMin=function(){$scope.minDate=$scope.minDate?null:new Date},$scope.toggleMin(),$scope.open=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.opened=!0},$scope.dateOptions={formatYear:"yyyy",startingDay:1},$scope.format="dd-MMMM-yyyy";var tomorrow=new Date;tomorrow.setDate(tomorrow.getDate()+1);var afterTomorrow=new Date;afterTomorrow.setDate(tomorrow.getDate()+2),$scope.events=[{date:tomorrow,status:"full"},{date:afterTomorrow,status:"partially"}],$scope.getDayClass=function(date,mode){if("day"===mode)for(var dayToCheck=new Date(date).setHours(0,0,0,0),i=0;i<$scope.events.length;i++){var currentDay=new Date($scope.events[i].date).setHours(0,0,0,0);if(dayToCheck===currentDay)return $scope.events[i].status}return""}}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","$injector",function($q,$location,$injector){return{responseError:function(rejection){switch(rejection.status){case 401:$injector.get("Authentication").user=null,$location.path("/signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html",controller:"SettingsController"}).state("profile.payment",{url:"/payment",templateUrl:"modules/users/views/settings/payment.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("payment",{url:"/payment",templateUrl:"modules/users/views/settings/payment.client.view.html",controller:"SettingsController"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"}).state("user",{url:"/user/:userId/:userRole",views:{"":{templateUrl:"modules/users/views/settings/user.client.view.html",controller:"SettingsController"},"userAppointments@user":{templateUrl:"modules/appointments/views/appointments-view.html",controller:"AppointmentsController",resolve:{appointments:["$q","Appointments",function($q,Appointments){var JobDone=Appointments.query({jobDone:!0}),notCancelled=Appointments.query({cancelled:!1});return $q.all([JobDone.$promise,notCancelled.$promise])}]}},"profile@user":{templateUrl:"modules/users/views/partials/staff-profile.html",controller:"SettingsController"}}})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication","$rootScope","$state","myAppointment",function($scope,$http,$location,Authentication,$rootScope,$state,myAppointment){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.$on("error",function(event,data){$scope.error=data.message}),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){console.log(response),$scope.authentication.user=response,$location.path(""===response.token?"/payment":"/user/home"),$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("ImgCtrl",["$scope","Upload","Authentication","Users","ngToast","$http",function($scope,Upload,Authentication,Users,ngToast,$http){$scope.user=Authentication.user,$scope.preview=$scope.user.profile_pic,$scope.imageCropResult=null,$scope.showImageCropper=!1,$scope.theResult={},$scope.showImg=!0,$scope.showImageFunction,$scope.showImageFunction=function(){$scope.user.profile_pic&&1===$scope.imageCropStep?$scope.showImg=!0:$scope.user.profile_pic&&2===$scope.imageCropStep&&($scope.showImg=!1)},$scope.$watch("imageCropResult",function(newVal){if(newVal){console.log("imageCropResult",newVal);var theResult={dataURL:newVal,lastname:Authentication.user.lastName,firstname:Authentication.user.firstName};console.log(theResult),$scope.croppedImgUpload(theResult)}}),$scope.croppedImgUpload=function(base64ImgObject){console.log("From the Cropped Image Upload Function"),$http.post("/auth/uploadAvatar",base64ImgObject).success(function(data,status,headers,config){if(console.log(data),console.log(status),console.log(data),200===status)var user=new Users(data);var profile_pic_path=data.path.replace("/Users/Bazazi/Desktop/meanJS/public","");$scope.preview=profile_pic_path,$scope.user.profile_pic=data.dataURL;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,$scope.imageCropStep=1,ngToast.create({className:"success",content:"Your Profile Picture was updated successfully",timeout:4e3}),Authentication.user=response,$scope.preview=Authentication.user.profile_pic},function(response){console.log(response),ngToast.create({className:"danger",content:response.data.message})})}).error(function(data,status,headers,config){console.log(data)})}}]),angular.module("users").controller("PaymentModalCtrl",["$scope","$rootScope","$modalInstance","user_card","payment",function($scope,$rootScope,$modalInstance,user_card,payment){console.log(payment),console.log(user_card),$scope.cancel=function(){$modalInstance.dismiss("cancel")},$scope.payment=payment,$rootScope.$on("card_change",function(){$scope.cancel()})}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication","$rootScope","ngToast",function($scope,$stateParams,$http,$location,Authentication,$rootScope,ngToast){$scope.authentication=Authentication,console.log($scope.authentication),$rootScope.$broadcast("password_reset"),$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$rootScope.$emit("password_reset"),$location.path("/dashboard"),ngToast({content:"Your password was changed successfully",className:"success"})}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$rootScope","$http","$location","Users","Authentication","Payment","$state","geocoder","Upload","ngToast","Appointments","$stateParams","Staff","$modal","myAppointment","notifications",function($scope,$rootScope,$http,$location,Users,Authentication,Payment,$state,geocoder,Upload,ngToast,Appointments,$stateParams,Staff,$modal,myAppointment,notifications){$scope.user=Authentication.user,$scope.appointment=myAppointment.getData(),$scope.authentication=Authentication,$scope.appointments=void 0,$scope.userFlag=!0,$scope.btnText="Show Users",$scope.def_av="../../../../img/flat-avatar.png",$scope.user.stripeCustomer&&($scope.card=$scope.user.stripeCustomer.sources.data[0]),$scope.role=$scope.authentication.userRole,$scope.save_customer=Payment,$scope.geocoder=geocoder,$scope.viewing={},$rootScope.$on("card_change",function(){console.log($scope.appointment),$scope.save_customer.updateUserTokens($scope.user,function(res){if($scope.card=res.stripeCustomer.sources.data[0],ngToast.create({className:"success",content:"Your card details were updated successfully"}),$scope.appointment){$scope.appointment.client=$scope.user._id,$scope.appointment.payment_entered=!0;var appointment=new Appointments($scope.appointment);appointment.$save(function(res){console.log(res),notifications.showSuccess({message:"Success! You should recieve an email shortly"}),$state.go("rdash.dash")})}})}),$rootScope.$on("show_card",function(){$state.reload()}),$scope.remove=function(user){user.$remove(function(res){console.log(res)})},$scope.findOne=function(app_query){$scope.viewing=Users.get({id:$stateParams.userId})},$stateParams.userId&&$scope.findOne($stateParams.userId),$scope.usersAppointments=function(){Appointments.query(app_query).$promise.then(function(res){res.length>0?($scope.appointments=res,$scope.total_apps=$scope.appointments.length):($scope.msg="You have no appointments",$scope.total_apps=res.length)})},$scope.openModal=function(user){var modalInstance=$modal.open({templateUrl:"modules/users/views/settings/payment.modal.view.html",controller:"PaymentModalCtrl",size:"sm",scope:$scope,resolve:{user_card:function(){return user},payment:["Payment",function(Payment){return Payment}]}});modalInstance.result.then(function(selectedItem){console.log(selectedItem),$scope.selected=selectedItem},function(){$scope.modalInstance=null})},$scope.showUsers=function(){$scope.userFlag=!$scope.userFlag,$scope.userFlag?($scope.btnText="Show Staff",$scope.users=Users.query(),$scope.show_table=!$scope.show_table):($scope.btnText="Show Users",Staff.query({roles:"staff"}).$promise.then(function(res){$scope.users=res,$scope.total_users=$scope.users.length}))},$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null,$scope.geocoder.geocode($scope.user).success(function(res,status){var results=res.results[0].geometry.location;$scope.user.address.main_address.lat=results.lat,$scope.user.address.main_address.lng=results.lng}).error(function(res){ngToast.create({className:"danger",content:res.message})});var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response,ngToast.create({className:"success",content:"Your profile updated successfully"}),$state.go("dash")},function(response){ngToast.create({className:"danger",content:response.data.message}),$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").directive("match",["$parse",function($parse){return{require:"ngModel",link:function(scope,elem,attrs,ctrl){scope.$watch(function(){return $parse(attrs.match)(scope)===ctrl.$modelValue},function(currentValue){ctrl.$setValidity("mismatch",currentValue)})}}}]),angular.module("users").factory("Authentication",["$http","$state","$location","$window","$rootScope",function($http,$state,$location,$window,$rootScope){var _this=this;if(_this.appointment_query={},_this.userRole={},_this.showAdmin=!1,_this._data={user:window.user},_this.isClient=!1,_this._data.user)switch(_this._data.user.roles[0]||_this.user.roles[0]){case"staff":_this.userRole="staff",_this.appointment_query={staff_id:_this._data.user._id,cancelled:!1};break;case"admin":_this.userRole="admin",_this.showAdmin=!0,_this.appointment_query={cancelled:!1};break;default:_this.userRole="user",_this.isClient=!0,_this.appointment_query={client:_this._data.user._id,cancelled:!1}}return _this.signUp=function(credentials,callback){$http.post("/auth/signup",credentials).success(function(response,message){_this._data.user=response,_this.user=response,callback(response)}).error(function(response){_this.error=response.message})},_this.check_username=function(obj,callback){$http.post("/auth/check_username",obj).success(function(response){callback(response)}).error(function(response){$rootScope.$broadcast("error",response)})},_this.signin=function(credentials,callback){$http.post("/auth/signin",credentials).success(function(response){_this._data.user=response,_this.user=response,console.log(_this._data.user),$state.go(response.stripeCustomer?null===response.displayName?"profile":"rdash.dash":"profile.payment")}).error(function(response){$rootScope.$broadcast("error",response)})},_this.createUser=function(credentials,callback){$http.post("/auth/signup",credentials).success(function(response){callback(response)}).error(function(response){_this.error=response.message})},_this.signout=function(){$http.get("/auth/signout").success(function(response){console.log(response.user),console.log(response),_this._data.user=response,_this.user=response}).error(function(response){_this.error=response.message})},_this}]),angular.module("core").factory("Payment",["$rootScope","Users","$state","Stripe","Authentication","ngToast","$sce","$q","Appointments","$resource","$http",function($rootScope,Users,$state,Stripe,Authentication,ngToast,$sce,$q,Appointments,$resource,$http){var user=Authentication._data.user,payment={};return payment.token="",payment.data={},payment.getStripeToken=function(status,response){if(response.error)return ngToast.create({content:response.error.message,className:"danger"}),payment.error=response.error,response;var token=response;return payment.token=token,$state.go("profile"),$rootScope.$emit("card_change"),payment.token},payment.getToken=function(){return payment.token},payment.updateUserTokens=function(user,callback){var token=payment.token;console.log("updateUserTokens Running");var stripe=new Stripe(token);stripe.$save().then(function(res){console.log(res);var newuser=new Users(user);newuser.stripeCustomer=res.stripeCustomer,newuser.$update().then(function(updatedUser){Authentication._data.user=updatedUser,Authentication.user=updatedUser,$rootScope.$emit("show_card"),callback(updatedUser)},function(errorResponse){payment.error=errorResponse.data.message})})},payment.createRefund=function(appointmentID,dollarAmount,callback){console.log(appointmentID),console.log(dollarAmount);var refundAmount={};Appointments.get({appointmentId:appointmentID}).$promise.then(function(data){if(console.log(data),void 0===data.stripeChargeObj)ngToast.create({className:"danger",dismissButton:!0,content:"This customer has not been charged"});else{if(void 0!==data.refundObj[0])return void ngToast.create({className:"danger",dismissButton:!0,content:"This refund has already been made"});refundAmount=null!==dollarAmount?100*dollarAmount:data.stripeChargeObj.amount,console.log(data.stripeChargeObj.amount),console.log(refundAmount);var refundDetails={refundAmount:refundAmount,chargeID:data.stripeChargeObj.id,reason:"No show",stripeCustomer:user.stripeCustomer.id},Myresource=$resource("stripe/refund/:chargeID",{chargeID:"@chargeID"}),stripe=new Myresource(refundDetails);console.log(stripe),stripe.$save().then(function(refundRes){console.log(refundRes),data.refundObj.push(refundRes.refund),data.$update().then(function(result){ngToast.create({className:"success",dismissButton:!0,content:refundRes.message}),callback(result)})},function(err){console.log(err),ngToast.create({className:"danger",dismissButton:!0,content:err.data.error.message})})}})},payment.createStaffAccount=function(account_details){console.log(account_details),$http.post("stripe/staff/create",account_details).success(function(result){console.log(result)}).error(function(err){console.log(err)})},payment.createCharge=function(user,appointmentID,callback){if(console.log(user),void 0===user.stripeCustomer)payment.error="You must add a valid card to proceed";else{console.log(user.stripeCustomer.id);var Obj={token:user.stripeCustomer.id,appointment_id:appointmentID},stripe=new Stripe(Obj);stripe.$charge().then(function(res){Appointments.get({appointmentId:appointmentID}).$promise.then(function(data){data.stripeChargeObj=res.chargeObj,data.jobDone=!0,data.cost=res.amount,callback(data)},function(err){console.log("Get Error "+err),ngToast.create({className:"success",dismissButton:!0,content:err.data.message.message})}),ngToast.create({className:"success",dismissButton:!0,content:res.msg})},function(err){console.log(err);ngToast.create({className:"danger",dismissButton:!0,content:$sce.trustAsHtml(err.data.message.message+"<br> <a ng-click=\"$state.go('payment')\">Click here to add a card</a>"),compileContent:!0})})}},payment}]),angular.module("users").factory("Stripe",["$resource",function($resource){return $resource("stripe/:stripeToken",{stripeToken:"@token"},{update:{method:"PUT"},charge:{method:"POST",params:{charge:!0}}})}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users/:id",{id:"@_id"},{update:{method:"PUT"},getStaff:{method:"GET",isArray:!0}})}]);